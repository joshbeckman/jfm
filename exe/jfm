#!/usr/bin/env ruby

require "bundler/setup"

require "dry/cli"

require_relative "../lib/jfm"

module Jfm
  module CLI
    class Command < Dry::CLI::Command
      def self.inherited(klass)
        super

        klass.option :dir, aliases: ["-d"], default: ".", desc: "Path to your Jekyll directory. Assumes the current directory."
      end
    end

    module Commands
      extend Dry::CLI::Registry

      class Version < Jfm::CLI::Command
        desc "Print version"

        def call(*)
          puts Jfm::VERSION
        end
      end

      class Find < Jfm::CLI::Command
        desc "Search for files with specific frontmatter. Outputs a list of filenames."

        argument :queries, type: :array, required: true, desc: "Query/queries to match"

        example [
          %q("layout"         # Finds all posts that have a "layout" value set in their frontmatter),
          %q("layout: post"   # Finds all posts whose "layout" value is set to "post"),
          %q("layout: ~post"  # Finds all posts whose "layout" value is *not* set to "post"),
          %q("tags contains post"  # Finds all posts whose "tag" value contains the entry "post")
        ]

        def call(dir:, queries: [], **)
          site = Site.new(dir)

          posts = site.posts.select do |post|
            queries.all? { |q| post.match?(q) }
          end

          posts.each do |post|
            puts post.filename
          end
        end
      end

      class Edit < Jfm::CLI::Command
        desc "Edit the frontmatter for a set of files"

        argument :values, type: :array, require: true, desc: "Values to add/edit"

        example [
          %q("foo: bar"    # Sets the value of the "foo" post variable to "bar")
        ]

        def call(dir:, values: [], **)
          posts = $stdin.each_line.map(&:chomp).map { |f| Post.new(f) }
          if posts.empty?
            warn "No files specified"
            abort
          end

          posts.each do |post|
            frontmatter = post.frontmatter
            values.each do |value|
              key, value = value.split(":").map(&:strip)
              frontmatter[key] = value
            end
            post.frontmatter = frontmatter
            post.save
          end
        end
      end

      register "version", Version, aliases: ["v", "-v", "--version"]
      register "find",    Find,    aliases: ["f"]
      register "edit",    Edit,    aliases: ["e"]
    end
  end
end

Dry::CLI.new(Jfm::CLI::Commands).call
